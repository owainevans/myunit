import numpy as np
import matplotlib.pylab as plt
from venture.venturemagics.ip_parallel import *
from reg_demo_utils import *
lite = 0  # 0 puma, 1 lite
v=mk_l() if lite else mk_c()
d={}
vs=test_ripls()


def sorter(di,d):
    if di=='as':
        st='as'
    else:
        st='pr'
    as_items = [item for item in d.items() if item[0].startswith(st)]
    return sorted(as_items,key=lambda pair: int(pair[0][2]),)


def run_dis(di,verbose=False):
    for item in sorter(di,d):
        if verbose: print item
        run(item[1])
        if verbose: print '----'
    
def run(prog,mag=0):
    if mag: 
        ip = get_ipython()
        ip.run_cell_magic('v','',prog)
    else:
        v.execute_program(prog)

def lines(s):
    ls = s.split('\n')
    for l in ls:
        if l:
            print l
            v.execute_instruction(l)

def testPredicts():
    di_list = v.list_directives()
    print 'false asserts: \n'
    for di in di_list:
        if di['instruction']=='predict' and di['value']==False: print di

def load_test():
    run_dis('as'); run_dis('pr'); testPredicts()



d['as1']='''
[assume zeros (lambda (n) (if (= n 0) (list) (pair 0 (zeros (minus n 1)))))]
[assume ones (lambda (n) (if (= n 0) (list) (pair 1 (ones (minus n 1)))))]         [assume is_nil (lambda (lst) (= lst nil) ) ]
[assume map (lambda (f lst) (if (is_nil lst) nil 
                                  (pair (f (first lst)) (map f (rest lst))) ) ) ]  '''
if lite: d['as1']= '[assume nil (list)]' +  d['as1']
#'''
d['pr1']='''
[predict (zeros (quote 5) ) ]
[predict (is_nil nil) ]
[predict (= 0 (lookup (zeros 10) 5) )]
[predict (= 1 (lookup (ones 10) 5) )]
[predict (map (lambda (lst) (lookup lst 0) ) (list (zeros 5) (ones 5)) ) ]
[predict (= (list true true) (map (lambda (x) (flip .999)) (zeros 2) ) )]
[predict (map (lambda (x) (normal 0 1)) (zeros 5) ) ]
'''

#fails
# [predict (zeros (5) ) ]
# [predict (zeros (list 1) ) ]

d['as2']='''
[assume repeat (lambda (th n) (if (= n 0) (list) (pair (th) (repeat th (- n 1) ) ) ) ) ]
'''
d['pr2']='''
[predict (not (and false true))]
[predict (or true false) ]
[predict (not ( (lambda (x) (and x (not x) ) ) (flip) ) ) ]
[predict ( (lambda (x) (or x (not x)) )  (flip) )  ]
[predict (repeat (lambda () (student_t 2) ) 10) ]
'''

d['as3']='''
[assume s_lookup (lambda (lst n) (if (gte n (size lst)) (quote index) (lookup lst n)) ) ]
[assume ss_lookup (lambda (lst n) (if (not (is_pair lst) ) 
                                      (quote empty_not_list)
                                      (if (or (is_pair n) (is_symbol n) )
                                          (quote not_int)
                                          (s_lookup lst n) ) ) ) ]
'''
d['pr3']='''
[predict (= (quote index) (s_lookup (zeros 4) 4) ) ] 
[predict (ss_lookup 4 4) ]
[predict (ss_lookup (list 4) (list 2)) ] 
[predict (= 10 (size (zeros 10)))]
[predict (= 0 (size nil))]
'''

d['as4']='''
[assume append (lambda (lst x) (if (is_nil lst) (list x)
                               (pair (first lst) (append (rest lst) x) ) ) )]
[assume reverse (lambda (lst) (if (is_nil lst) nil
                               (append (reverse (rest lst) ) (first lst) ) ) ) ]
'''
d['pr4']='''
[predict (append (list) 1 ) ]
[predict (append (list 1) 6 ) ]
[predict (reverse (list 1 2 3) )]
[predict (= (map not (reverse (list true false))) (reverse (map not (list true false)) ) ) ] '''

d['as5']='''
[assume range (lambda (n) (srange 0 n 1) ) ]
[assume srange (lambda (b e s) (if (gte b e) (list)
                                (pair b (srange (+ b s) e s) ) ) ) ]
[assume neq (lambda (a b) (not (= a b) ) ) ]
'''
#[assume ls_eq (lambda (x y) (if (neq (size x) (size y) ) false
#                           (if (and (is_nil x) (is_nil y)) true
#                            (and (= (first x) (first y) )
#                                 (ls_eq (rest x) (rest y) ) ) ) ) ) ]

d['pr5']='''[predict (= (list 1) (reverse (list 1)) ) ]
[predict (= (range 2) (reverse (list 1 0)) )]
[predict (= (append (range 2) 2) (range 3) )]
[predict (= (srange 10 20 5) (list 10 15) ) ]
[predict (= nil nil) ]
[predict (= (list 1) (list 1)) ]
[predict (not (= nil (list nil)))]
[predict (not (= (list 1) (list 1 2 3) )) ]
[predict (= (range 2) (list 0 1) ) ]
[predict (not (= (range 5) (range 4) ) )]
[predict (srange 1 20 5) ]
[predict (= (srange 0 5 1) (range 5) ) ]
'''
d['as6']='''
[assume ar_eq (lambda (a b n) (if (< n 0) true
                              (and (= (lookup a n) (lookup b n) )
                                   (ar_eq a b (- n 1)) ) ) ) ]
[assume ar_ze (lambda (n)(if (= n 0) (array)
                            (if (= n 1) (array 0)
                            (if (= n 2) (array 0 0)
                            (if (= n 3) (array 0 0 0)
                            (if (= n 4) (array 0 0 0 0)
                            (if (= n 5) (array 0 0 0 0 0)
                            (if (= n 6) (array 0 0 0 0 0 0) (quote fail)))))))))]
[assume ar_ra (lambda (n)(if (= n 0) (array)
                            (if (= n 1) (array 0)
                            (if (= n 2) (array 0 1)
                            (if (= n 3) (array 0 1 2)
                            (if (= n 4) (array 0 1 2 3)
                            (if (= n 5) (array 0 1 2 3 4)
                            (if (= n 6) (array 0 1 2 3 4 5) (quote fail)))))))))]
[assume ar_ls_l (lambda (ar l u) (if (= l u) (list)
                                 (pair (lookup ar l) (ar_ls_l ar (+ l 1) u) ) ) )]
[assume ar_ls (lambda (ar n) (ar_ls_l ar 0 n) ) ] 
[assume map_ar_ls (lambda (f ar n) (map f (ar_ls ar n) ) ) ]
'''
d['pr6']='''
[predict (ar_eq (array 1) (array 1) 0 ) ]
[predict (not (ar_eq (array 1 2) (array 3 2) 1 )) ]
[predict (not (ar_eq (array 1) (array 2) 0 )) ]
[predict (ar_ls (array) 0)]
[predict (ar_ls (array 1) 0)]
[predict (ar_ls (array 1) 1)]
[predict (=  (ar_ls_l (ar_ze 5) 2 4) (list 0 0) ) ]
[predict (= (ar_ls (array nil nil) 2) (list nil nil) )]
[predict (lookup (map_ar_ls (lambda (x) true) (array 0 1) 2) 0)]
'''
def mk_ar_zeros(n):
    start = '[assume ar_zeros_%s (lambda (n) (if (= n 0) (array)' % n
    mid = []
    for i in range(1,n+1):
        ar = str(([0] * i)).replace(',','')[1:-1]
        mid.append( '(if (= n %i) (array %s)' % (i,ar) )
    end = ' (quote fail) %s )]' % ''.join([')']*(n+1))
    return start + ''.join(mid) + end

def mk_ar_range(n):
    start = '[assume ar_range_%s (lambda (n) (if (= n 0) (array)' % n
    mid = []
    for i in range(1,n+1):
        ar = str(range(i)).replace(',','')[1:-1]
        mid.append( ' (if (= n %i) (array %s)' % (i,ar) )
    end = ' (quote fail) %s )]' % ''.join([')']*(n+1))
    return start + ''.join(mid) + end

d['as7'] = mk_ar_zeros(4) + mk_ar_range(4) + mk_ar_zeros(20) + mk_ar_range(20)
d['pr7']='''
[predict (ar_eq (ar_zeros_4 2) (ar_ze 2) 1) ]
[predict (ar_eq (ar_zeros_4 4) (ar_ze 4) 1) ]
[predict (ar_eq (ar_range_4 2) (ar_ra 2) 1) ]
[predict (ar_eq (ar_range_4 4) (ar_ra 4) 3) ]

[predict (contains (dict (quote (a b c d)) (range 4)) (quote c) ) ]
[predict (= 2 (lookup (dict (quote (a b c d)) (range 4)) (quote c)   ) )]
[predict (= (lookup (lookup (dict (list (quote a) (quote b))
                       (list (ar_zeros_20 10) (ar_range_20 10) ) )
                  (quote b) )
                  9 ) 9 ) ]
'''

d['as8']='''
[assume cat (lambda (xs ys) (if (is_nil ys) xs
                                 (cat (append xs (first ys)) (rest ys) ) ) )]
[assume fold (lambda (f l el) (if (is_nil l) el
                                (f (first l) (fold f (rest l) el) ) ) ) ]
'''
d['pr8']='''
[predict (= 1 (fold + (range 2) 0) )]
[predict (= 1 (fold (lambda (x y) (+ x y) ) (range 2) 0))]
[predict (=  (zeros 6) 
   (fold cat (list (zeros 2) (zeros 2) (zeros 2) ) nil) )]
[predict (and (is_nil (cat nil nil)) 
               (= (list 0) (cat (list 0) nil)) ) ]
[predict (= (cat (zeros 2) (zeros 2)) (zeros 4) ) ]
[predict (= (quote a) (quote a) ) ]
[predict (= (quote (a b c)) (pair (quote a) (quote (b c))) ) ]
[predict (= (cat (map not (list true)) (map not (list false)) )
            (map not (cat (list true) (list false) ) ) ) ]
'''

d['as9'] = '''
[assume uni_draw (lambda (xs) (if (not (is_pair xs)) (quote error)
                          (lookup xs (uniform_discrete 0 (size xs) ) ) )) ]
[assume suml (lambda (xs) (fold + xs 0) )]
[assume prodl (lambda (xs) (fold * xs 1) ) ]
[assume mean (lambda (xs) (if (not (is_pair xs)) (quote error) 
                       (/ (suml xs) (size xs)) )) ]
[assume andl (lambda (xs) (fold and xs true)) ]
[assume nflip (lambda () (if (flip) 1 0)) ]
[assume nflip_p (lambda (p) (if (flip p) 1 0) ) ]
[assume index_s (lambda (xs x s) (if (gte s (size xs) ) -1 
                                   (if (= (lookup xs s) x) s
                                    (index_s xs x (+ s 1) ) ) ) )  ]
[assume index (lambda (xs x) (index_s xs x 0) ) ]
'''
d['pr9']='''
[predict (= 0 (index (list 1) 1) )]
[predict (= -1 (index (list 1) 2) )]
[predict (= 6 (index (range 6) 5) )]
[predict (= 0 (prodl (zeros 5)))]
[predict (= 120 (prodl (srange 1 6 1) ) ) ]
[predict (= 0 (suml (zeros 5)))]
[predict (> 100 (suml (range 4)))]

[predict (< .1 (mean (repeat nflip 20) ) )]
[predict (is_nil (repeat (lambda () nil) 0) ) ]
[predict (> 1.5 (suml (repeat (lambda () (normal 0 .1) ) 20) ) ) ]
[predict ( (lambda (coin) (and coin coin) ) (flip) ) ]
[predict (= (suml (map (lambda (x) x ) (range 3) )) 6 ) ]
[predict (> (suml (map (lambda (x)(+ x 1)) (range 3))) (suml (range 3)))]
[predict (> (prodl (map (lambda (x)(+ x 1)) (range 3))) (prodl (range 3)))]
'''
##[predict (andl (list 1 1)) ] FAILS
#[predict (not (andl (zeros 2) ) ) ]
#[predict (not (andl (list 1 0 1))) ]

###############
mvn='''
[assume dot2 (lambda (v w) (suml (zip (ar_ls v) (ar_ls w) ) ) ) ] 

[assume ar_ls_l (lambda (ar l u) (if (= l u) (list)
                                 (pair (lookup ar l) (ar_ls_l ar (+ l 1) u) ) ) )]
[assume ar_ls (lambda (ar) (ar_ls_l ar 0 (size ar)) ) ] 
[assume noisy_true (lambda (pred noise) (if pred true (flip noise)) ) ]
[assume obs_noise (beta 30 1) ]

[assume stn (lambda () (normal 0 1))]
[assume noi (lambda (x) (normal x .01) ) ]
[assume x_d (lambda () (array (stn) (stn)) ) ]
[assume xs (mem (lambda (i) (x_d) ) ) ]
[assume a (array (array (stn) (stn)) (array (stn) (stn)) ) ]
[assume sum_ar (lambda (v w) (array (+ (lookup v 0) (lookup w 0))  (+ (lookup v 1) (lookup w 1)) ) ) ]
[assume dot (lambda (v w) (+ (* (lookup v 0) (lookup w 0))
                             (* (lookup v 1) (lookup w 1)) ) ) ]



[assume mat_vec (lambda (m v) (array (dot (lookup m 0) v) (dot (lookup m 1) v)))]

[assume y_x (lambda (x) (map noi (ar_ls (mat_vec a x))  ) ) ]
[assume y (mem (lambda (i) (y_x (xs i) ) ) ) ]'''

## note: you can't add gaussian noise to variable and condition. have to always draw from a gaussian. 

# note: what do we need to work with arrays? i don't think it's enough just to have
# something that takes a thunk and repeatedly draws from it. if we had list2array, i think we'd be good.
# e.g. to get a standard norm vector (list2array (map stn (ones n) ) )
# e.g. to implement map_ar: (list2array (map f (array2lst) ) )
#   where (array2lst ar) (let ([n (size ar)]) (if (= 0 n) nil (pair (lookup ar 0) (ar2lst 

#  (array2lst ar l u) (if (= l u) (list) (pair (lookup ar l) (array2lst (ar (+ l + 1)


[v.execute_program(mvn) for v in vs]

mean = [0,0]; cov = [[1,0],[0,1]];
ys = np.random.multivariate_normal(mean,cov,10)

def obs(ys):
    [v.observe('(noisy_true (= (lookup (y %i) 0) %f) obs_noise)' %(i,y[0]),'true') for v in vs for i,y in enumerate(ys)]
    [v.observe('(noisy_true (= (lookup (y %i) 1) %f) obs_noise)' %(i,y[1]),'true') for v in vs for i,y in enumerate(ys)]

#obs(ys)
[v.infer(100) for v in vs]






alpha_topic_word = '50' # high concentration, so each topic a uniform dist
no_topics = 5
size_vocab = 20
def mk_lda(clda=True,alpha_topic='(gamma 1 1)',no_topics=5,size_vocab=20):
    lda='''
    [assume topics %i]
    [assume vocab %i]
    [assume alpha_doc_topic (gamma 1 1) ]
    [assume alpha_topic_word %s ]

    [assume doc (mem (lambda (doc_ind) (make_sym_dir_mult alpha_doc_topic topics) ) )]

    [assume topic (mem (lambda (topic_ind) (make_sym_dir_mult alpha_topic_word vocab) ) )]

    [assume word (mem (lambda (doc_ind word_ind) ( (topic ((doc doc_ind)) ) )  ) ) ]
    ''' % (no_topics,size_vocab,alpha_topic)


    ulda='''
    [assume topics %i]
    [assume vocab %i]
    [assume alpha_doc_topic (gamma 1 1) ]
    [assume alpha_topic_word %s ]
    [assume doc (mem (lambda (doc_ind) (symmetric_dirichlet alpha_doc_topic topics)))]
    [assume topic (mem (lambda (topic_ind) (symmetric_dirichlet alpha_topic_word vocab) ) )]
    [assume z (mem (lambda (doc_ind word_ind) (categorical (doc doc_ind)) ) ) ]
    [assume word (mem (lambda (doc_ind word_ind)
      (categorical (topic (z doc_ind word_ind) ) ) ) ) ] 
    ''' % (no_topics,size_vocab,alpha_topic)
    return lda if clda else ulda

def test_lda():
    def gen_data(lite=0,clda=1):
        vs=[mk_c() for i in range(2)] if not(lite) else [mk_l() for i in range(2)]
        no_topics=2;size_vocab=20; nt=no_topics; sv=size_vocab
        vs[0].execute_program(mk_lda(clda=clda,
                                     alpha_topic='50',no_topics=nt,size_vocab=sv))
        vs[1].execute_program(mk_lda(clda=clda,
                                     alpha_topic='.001',no_topics=nt,size_vocab=sv))
        # .1 is high concentration
        no_docs = 5; words_per_doc = 300; corpus={}
        for i,v in enumerate(vs):
            corpus[i]=[]
            for doc in range(no_docs):
                p=[v.predict('(word %i %i)' % (doc,ind) ) for ind in range(words_per_doc)]
                corpus[i].append(p)
        assert all(1>np.abs( (np.mean(corpus[0],axis=1) - np.mean(range(20))))) 
        assert sum(np.std(corpus[1],axis=1)) < sum(np.std(corpus[0],axis=1))
        

        if not(clda):
            uni = vs[0].sample('(topic 0)') 
            concen = vs[1].sample('(topic 0)')
            
            assert all(.1 > np.abs( uni - 1./size_vocab) )
             
            print [v.sample('(topic 0)') for v in vs]
            print [v.sample('(doc 0)') for v in vs]
    
    gen_data(lite=0,clda=1)
    gen_data(lite=1,clda=0)
    gen_data(lite=0,clda=0)

                                    

    ## INFERENCE
    def lda_inf():
        no_topics=2;size_vocab=10; nt=no_topics; sv=size_vocab
        vs=[mk_c() for i in range(2)]
        vs[0].execute_program(mk_lda(alpha_topic='(gamma 1 1)',
                                     no_topics=nt,size_vocab=sv))
        vs[1].execute_program(mk_lda(alpha_topic='(gamma 1 1)',
                                     no_topics=nt,size_vocab=sv))

        topics = [ [.5]*2 + [0.001]*8, [0.001]*8 + [.5]*2 ]
        docs = [ [0]*10 +[1]*10, [9]*10 + [8]*10, [9]*10 + [8]*10 ]
        for v in vs:
            for doc_ind,doc in enumerate(docs):
                for word_ind in range(len(doc)):
                    v.observe('(word %i %i)'%(doc_ind,word_ind),'%i'%doc[word_ind])
        [v.infer(500) for v in vs]
        print [v.predict('alpha_topic_word') for v in vs]
        print [v.predict('alpha_doc_topic') for v in vs]

        doc0_new = []; topic_gen=[]
        for v in vs:
            d_new= [v.predict('(word 0 %i)'%i) for i in range(20,30)]
            d_probs = np.histogram(d_new,bins=range(size_vocab),density=True)
            doc0_new.append( {'hashv':hash(v),
                              'doc0_draws':d_new, 'doc0_probs':d_probs} )

            topic_gen.append({'hashv':hash(v)})
            for topic_ind in range(no_topics):
                t_new = [v.predict('( (topic %i) )'%topic_ind) for i in range(30) ]
                t_probs = np.histogram(t_new,bins=range(size_vocab),density=True)
                topic_gen[-1].update({'topic%i_draws'%topic_ind :t_new,
                                      'topic%i__probs'%topic_ind :t_probs} )
        #print 'doc0 data:',docs[0],'doc0_new: ', doc0_new
        #print 'topic0 data:',topics[0],'topics0_new: ', topic0

        new_docs=[]
        for v in vs:
            new_docs.append( [v.predict('(word 3 %i)'%i) for i in range(30)] )    
        #print new_docs
    return None

    



dp='''
[assume alpha .99]
[assume mem_norm (mem (lambda (i) (normal 0 1) ) )]
[assume my_crp (make_crp alpha) ]
[assume dp_norm (lambda () (mem_norm (my_crp)) ) ]
[assume dpmem (lambda (th a)
               ( (lambda (mem_th my_crp)
                   (lambda () (mem_th (my_crp)) )
                  ) 
                 (mem (lambda (i) (th) ) )  (make_crp a) ) ) ]
[assume dp_norm2 (dpmem (lambda()(normal 0 1)) .99)]
[assume dp_norm3 (dpmem (lambda()(normal 0 1)) .001)]
'''
pr_dp='''
[predict (> 1 (- (mean (repeat dp_norm 50)) (mean (repeat dp_norm2 50)) ) ) ]

[predict (or (= (dp_norm3) (uni_draw (repeat dp_norm3 20) ))
             (= (dp_norm3) (uni_draw (repeat dp_norm3 20) )) )]
[predict (list (dp_norm) (dp_norm) (dp_norm) (dp_norm) (dp_norm)) ]
[predict (> 1 (mean (repeat dp_norm 50)) ) ]
[predict (> 1 (mean (repeat dp_norm 50)) ) ]
'''
#out12 = run(dp)

gsym='''
[assume gsym (lambda () (uniform_discrete 0 (pow 10 6) ) ) ]
[assume g (repeat gsym 100) ]
[predict (= -1 (index_s g (first g) 1) ) ]
[predict (= -1 (index_s g (second g) 2) ) ]
'''
#out13=run(gsym)

irm='''
[assume classdist (dpmem gsym .95)]
[assume obj_class (mem (lambda (obj) (classdist) ) ) ]
[assume classes_params (mem (lambda (c1 c2) (beta .1 .1) ) ) ]
[assume talks (mem (lambda (o1 o2) 
                         (flip (classes_params (obj_class o1) (obj_class o2)))))]
'''
irm_sym='''
[assume classdist (dpmem gsym .95)]
[assume obj_class (mem (lambda (obj) (classdist) ) ) ]
[assume classes_params (mem (lambda (c1 c2) (beta .1 .1) ) ) ]
[assume talks (mem (lambda (o1 o2)
  (if (< o1 o2) (flip (classes_params (obj_class o1) (obj_class o2)))
                (flip (classes_params (obj_class o2) (obj_class o1))))))]

'''

# idea: instead of pais of groups having a coin weight and indivs
# either talk or dont we might want to model ongoing interaction
# between pairs, which could be heterogeneous over time. one 
# idea is that pairs of groups give different starting points
# for urn processes, or alternatively different prior on the pairs
# coin weight. so for each pair of groups, we'd have a hyper prior
# over a beta. e.g. 


irm_sym_beta='''
[assume classdist (dpmem gsym .95)]
[assume obj_class (mem (lambda (obj) (classdist) ) ) ]
[assume classes_params (mem (lambda (c1 c2) (beta .1 .1) ) ) ]
[assume talks (mem (lambda (o1 o2)
  (if (< o1 o2) (flip (classes_params (obj_class o1) (obj_class o2)))
                (flip (classes_params (obj_class o2) (obj_class o1))))))]

'''
cross_cat='''
[assume kinddist (dpmem gsym .95) ]
[assume 


# [assume x (mem (lambda i f) 
#              (let ( [kindf (kind_f f)]
#                     [z_i_kindf (z_kind_f kindf)]
#                     [th_i_f (th f z_i) ] )
#                     (flip th_i_f) ) ) ]

[assume crp_draw (make_crp .99) ]
[assume kind (mem (lambda (f) (crp_draw) ) ) ]
[assume kind_class (mem (lambda (kind) (make_crp .99) ) ) ]
[assume i_kind_class (mem (lambda (i kind) (kind_class kind) ) ) ]
[assume f_kindclass_th (mem (lambda (f kind_class) (beta .3 .3) ) ) ]
[assume x (mem (lambda i f)
                (let ([kindf (kind f) ]
                      [ikindclass (i_kind_class i kindf)]
                      [fkindth (f_kind_th (f 

[assume x (mem (lambda i f)
            (flip (th f (z_kind_f (kind_f f) ) ) ) ]
                    

             (let ( [kindf (kind_f f)]
                    [z_i (z_kind_f kindf i)]
                    [theta (theta f z_i) ] )
                    (flip theta) ) ) ]





'''
def irm():
    out14=run(irm_sym)
    n=20
    graph = [ [] ] * n
    for i in range(n):
        graph[i]= [v.predict('(talks %s %s)' % (str(i),str(j)) ) for j in range(n) ]

    g = np.array(graph)
    g = g.astype(int)
    def find_class(i): return v.sample( '(obj_class %s)' % str(i) )
    h=g.tolist()
    keys = [find_class(i) for i in range(len(h)) ]
    h_key = zip(h,keys)
    h_sor = sorted(h_key,key=lambda row_key: row_key[1])
    h_sor_nokey = np.array( [row_key[0] for row_key in h_sor] )
    assert np.sum(np.array(h_sor_nokey)) == np.sum(g)
    fig,ax = plt.subplots(2,1)
    ax[0].imshow(g); ax[1].imshow(h_sor_nokey)



# from venture.shortcuts import make_lite_church_prime_ripl as mk_lite
# v=mk_lite()


# v.assume("f","""
# (make_lazy_hmm
#  (simplex 0.9 0.1)
#  (matrix (list (list 0.7 0.3)
#                (list 0.3 0.7)))
#  (matrix (list (list 0.9 0.1)
#                (list 0.6 0.4))))
# """)
# v.observe("(f 1)",'0')
# v.observe("(f 2)",'0')
# v.observe("(f 1)","atom<0>")
# v.observe("(f 2)","atom<0>")
# v.observe("(f 3)","atom<1>")
# v.observe("(f 4)","atom<0>")
# v.observe("(f 5)","atom<0>")
# v.predict("(f 6)",label="pid")









 


