ip = get_ipython()
v=ipy_ripl

def run(prog,mag=0):
    if mag: 
        ip = get_ipython()
        ip.run_cell_magic('v','',prog)
    else:
        v.execute_program(prog)

def lines(s):
    ls = s.split('\n')
    for l in ls:
        if l:
            print l
            v.execute_instruction(l)

c=''' 
[clear]
[assume zeros (lambda (n) (if (= n 0) (list) (pair 0 (zeros (minus n 1)))))]
                                  
[assume is_nil (lambda (lst) (not (is_pair lst) ) ) ]
[assume nil (list)]
[predict (zeros (quote 5) ) ]

[predict (is_nil nil) ]
'''
#fails
# [predict (zeros (5) ) ]
# [predict (zeros (list 1) ) ]

out1 = run(c)

c='''
[assume second (lambda (lst) (first (rest lst) ) ) ]
[assume repeat (lambda (th n) (if (= n 0) (list) (pair (th) (repeat th (minus n 1) ) ) ) ) ]
[assume and (lambda (a b) (if a (if b true false) false) ) ]
[assume or (lambda (a b) (if a true (if b true false) ) ) ]
[assume and_01 (and 0 1)]
[assume or_tf (or true false) ]

[assume fs (repeat flip 2) ]
[assume lhs (or (not (first fs)) (not (second fs))  ) ]
[assume rhs (not (and (first fs) (second fs) ) ) ]
[assume lhs_rhs (= lhs rhs) ]
'''
out2 = run(c)


c='''
[assume len (lambda (lst) (if (is_nil lst) 0 (plus 1 (len (rest lst))) ) ) ]
[assume len_nil (len nil) ]
[assume p (poisson 10)]
[assume len_zeros (= p (len (zeros p) ) ) ]
[assume s_lookup (lambda (lst n) (if (gte n (len lst)) (quote index) (lookup lst n)) ) ]
[assume ss_lookup (lambda (lst n) (if (not (is_pair lst) ) 
                                      (quote empty_not_list)
                                      (if (or (is_pair n) (is_symbol n) )
                                          (quote not_int)
                                          (s_lookup lst n) ) ) ) ]
[assume look_check (s_lookup (zeros 4) 4) ] 
[assume slook_check1 (ss_lookup 4 4)]
[assume slook_check2 (ss_lookup (list 4) (list 2))]
'''
out3 = run(c)
c='''
[assume append (lambda (lst x) (if (is_nil lst) (list x)
                               (pair (first lst) (append (rest lst) x) ) ) )]
[assume reverse (lambda (lst) (if (is_nil lst) nil
                               (append (reverse (rest lst) ) (first lst) ) ) ) ]
[predict (append (list) 1 ) ]
[predict (append (list 1) 6 ) ]
[predict (reverse (list 1 2 3) )]'''
out4 = run(c)
d='''
[assume range (lambda (n) (srange 0 n 1) ) ]
[assume srange (lambda (b e s) (if (gte b e) (list)
                                (pair b (srange (+ b s) e s) ) ) ) ]
[assume neq (lambda (a b) (not (= a b) ) ) ]
[assume ls_eq (lambda (x y) (if (neq (len x) (len y) ) false
                           (if (and (is_nil x) (is_nil y)) true
                            (and (= (first x) (first y) )
                                 (ls_eq (rest x) (rest y) ) ) ) ) ) ]
[predict (ls_eq (list 1) (reverse (list 1)) ) ]
[predict (ls_eq (range 2) (reverse (list 1 0)) )]
[predict (ls_eq (append (range 2) 2) (range 3) )]
'''
out5 = run(d)
e='''
[predict (ls_eq (srange 10 20 5) (list 10 15) ) ]
[predict (ls_eq nil nil) ]
[predict (ls_eq (list 1) (list 1)) ]
[predict (not (ls_eq nil (list nil)))]
[predict (not (ls_eq (list 1) (list 1 2 3) )) ]

[predict (ls_eq (range 2) (list 0 1) ) ]
[predict (not (ls_eq (range 5) (range 4) ) )]
[predict (srange 1 20 5) ]
[predict (ls_eq (srange 0 5 1) (range 5) ) ]
'''
f='''
[assume ar_eq (lambda (a b n) (if (< n 0) true
                              (and (= (lookup a n) (lookup b n) )
                                   (ar_eq a b (- n 1)) ) ) ) ]
[predict (ar_eq (array 1) (array 1) 0 ) ]
[predict (not (ar_eq (array 1 2) (array 3 2) 1 )) ]
[predict (not (ar_eq (array 1) (array 2) 0 )) ]
'''
print 'out6 \n'; out6 = run(f)

ef='''
[assume ar_ze (lambda (n)(if (= n 0) (array)
                            (if (= n 1) (array 0)
                            (if (= n 2) (array 0 0)
                            (if (= n 3) (array 0 0 0)
                            (if (= n 4) (array 0 0 0 0)
                            (if (= n 5) (array 0 0 0 0 0)
                            (if (= n 6) (array 0 0 0 0 0 0) (quote fail)))))))))]
[assume ar_ra (lambda (n)(if (= n 0) (array)
                            (if (= n 1) (array 0)
                            (if (= n 2) (array 0 1)
                            (if (= n 3) (array 0 1 2)
                            (if (= n 4) (array 0 1 2 3)
                            (if (= n 5) (array 0 1 2 3 4)
                            (if (= n 6) (array 0 1 2 3 4 5) (quote fail)))))))))]

[assume ar_ls_l (lambda (ar l u) (if (= l u) (list)
                                 (pair (lookup ar l) (ar_ls_l ar (+ l 1) u) ) ) )]
[assume ar_ls (lambda (ar n) (ar_ls_l ar 0 n) ) ] 
[assume map_ar_ls (lambda (f ar n) (map_list f (ar_ls ar n) ) ) ]
[predict (ar_ls (array) 0)]
[predict (ar_ls (array 1) 0)]
[predict (ar_ls (array 1) 1)]
[predict (ls_eq  (ar_ls_l (ar_ze 5) 2 4) (list 0 0) ) ]
[predict (not (ls_eq (ar_ls (array nil nil) 2) (list nil nil) ) )]
[predict (lookup (map_ar_ls (lambda (x) true) (array 0 1) 2) 0)]
'''
out7= run(ef)

def mk_ar_zeros(n):
    start = '[assume ar_zeros_%s (lambda (n) (if (= n 0) (array)' % n
    mid = []
    for i in range(1,n+1):
        ar = str(([0] * i)).replace(',','')[1:-1]
        mid.append( '(if (= n %i) (array %s)' % (i,ar) )
    end = ' (quote fail) %s )]' % ''.join([')']*(n+1))
    return start + ''.join(mid) + end

def mk_ar_range(n):
    start = '[assume ar_range_%s (lambda (n) (if (= n 0) (array)' % n
    mid = []
    for i in range(1,n+1):
        ar = str(range(i)).replace(',','')[1:-1]
        mid.append( ' (if (= n %i) (array %s)' % (i,ar) )
    end = ' (quote fail) %s )]' % ''.join([')']*(n+1))
    return start + ''.join(mid) + end

v.execute_instruction(mk_ar_zeros(4))
v.execute_instruction(mk_ar_range(4))
v.execute_instruction(mk_ar_zeros(50))
v.execute_instruction(mk_ar_range(50))
f='''
[predict (ar_eq (ar_zeros_4 2) (ar_ze 2) 1) ]
[predict (ar_eq (ar_zeros_4 4) (ar_ze 4) 1) ]
[predict (ar_eq (ar_range_4 2) (ar_ra 2) 1) ]
[predict (ar_eq (ar_range_4 4) (ar_ra 4) 3) ]
'''
out8 = run(f)    
 

g='''
[predict (contains (dict (quote (a b c d)) (range 4)) (quote c) ) ]
[predict (= 2 (lookup (dict (quote (a b c d)) (range 4)) (quote c)   ) )]
[predict (= (lookup (lookup (dict (list (quote a) (quote b))
                       (list (ar_zeros_50 10) (ar_range_50 10) ) )
                  (quote b) )
                  9 ) 9 ) ]
'''
out9 = run(g)


v.execute_instruction(mk_ar_range(100))
v.execute_instruction( '[assume ls (range 100) ]')
v.execute_instruction( '[assume ar (ar_range_100 100) ]')
# %timeit v.execute_instruction( '[predict (= (lookup ls 15) 15) ]')
# %timeit v.execute_instruction( '[predict (= (lookup ar 15) 15) ]')
# %timeit v.execute_instruction( '[predict (= (lookup ls 90) 90) ]')
# %timeit v.execute_instruction( '[predict (= (lookup ar 90) 90) ]')


h='''
[assume cat (lambda (xs ys) (if (is_nil ys) xs
                                 (cat (append xs (first ys)) (rest ys) ) ) )]
[assume fold (lambda (f l el) (if (is_nil l) el
                                (f (first l) (fold f (rest l) el) ) ) ) ]
[predict (= 1 (fold + (range 2) 0) )]
[predict (= 1 (fold (lambda (x y) (+ x y) ) (range 2) 0))]
[predict (ls_eq  (zeros 6) 
   (fold cat (list (zeros 2) (zeros 2) (zeros 2) ) nil) )]


[predict (and (is_nil (cat nil nil)) 
               (ls_eq (list 0) (cat (list 0) nil)) ) ]
[predict (ls_eq (cat (zeros 2) (zeros 2)) (zeros 4) ) ]

[predict (= (quote a) (quote a) ) ]
[predict (ls_eq (quote (a b c)) (pair (quote a) (quote (b c))) ) ]
'''
out10 = run(h)

d_i = '''
[assume repeat (lambda (th n) (if (= n 0) (list) (pair (th) (repeat th (minus n 1) ) ) ) ) ] 
[assume uni_draw (lambda (xs) (if (not (is_pair xs)) (quote error)
                          (lookup xs (uniform_discrete 0 (len xs) ) ) )) ]
[assume suml (xs) (fold + xs 0)]
[predict (= 0 (suml (zeros 5)))]
[predict (= 6 (suml (range 4)))]
[predict (= 1 (uni_draw (list 1) ) ) ]
[predict (> 1 (suml (repeat (lambda () (uni_draw (range 5) ) ) 20) ) ) ]
[predict (> .2 (suml (repeat flip 20) ) )]
[predict (is_nil (repeat (lambda () nil) 0) ) ]
[predict (< 1 (suml (repeat (lambda () (normal 0 .3) ) 20) ) ) ]
[predict (< 1 (suml (repeat (lambda () (normal 0 .3) ) 20) ) ) ]


di_list = v.list_directives()
print 'false asserts: \n'
for di in di_list:
    if di['instruction']=='predict' and di['value']==False: print di


## dict vs. list
#%v [assume l 


 


