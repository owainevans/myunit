#!/usr/bin/env python
#from iclus import *

%run ~/myunit/ip_parallel.py


def testCopyFunction():
# test for copy_ripl funtion
    myv = make_church_prime_ripl()
    myv.assume('x','(beta 1 1)'); myv.observe('(normal x 1)','5'); myv.predict('(flip)')
    assert [build_exp(di['expression']) for di in myv.list_directives() ] ==  [build_exp(di['expression']) for di in copy_ripl(myv).list_directives() ]

def testParallelCopyFunction():
# test for parallel use of copy_ripl_string
## FIXME should be a try,except coz cluster won't be running
    cli = Client(); dv = cli[:]; dv.block=True
    dv.execute(copy_ripl_string)
    dv.execute('from venture.shortcuts import make_church_prime_ripl')
    dv.execute('v=make_church_prime_ripl()')
    dv.execute('v.set_seed(1)')
    dv.execute("v.assume('x','(beta 1 1)'); v.observe('(normal x 1)','5'); v.predict('(flip)')" )
    dv.execute("v2 = copy_ripl(v,seed=1)" )
    dv.execute("true_assert = [build_exp(di['expression']) for di in v.list_directives() ] ==  [build_exp(di['expression']) for di in copy_ripl(v).list_directives() ]")
    assert all(dv['true_assert'])

## TEST adding and removing ripls and pulling info about ripls to mripl

def testAddRemoveSize():
    no_rips = 4
    vv=MRipl(no_rips)

    def check_size(mr,no_rips):
        survey = mr.dview.apply(lambda: len(ripls))
        pred = len(mr.predict('(+ 1 1)'))

        sizes = [mr.no_ripls, len(mr.seeds), len(mr.display_ripls()),
                 len(mr.ripls_location), sum(survey), pred]
        return sizes == ( [no_rips]*len(sizes) )

    assert(check_size(vv,no_rips))

    no_rips += 2
    vv.add_ripls(2)
    assert(check_size(vv,no_rips))

    no_rips -= 2
    vv.remove_ripls(2)
    assert(check_size(vv,no_rips))

def testCopyRipl():
    # create rips, add an assume. add some rips. get some reports
    # and see if reports are all the same. 
    no_rips = 4
    vv = MRipl(no_rips)
    vv.assume('x','3.')
    
    no_rips += 3
    vv.add_ripls(3)
    assert( vv.report(1) == ( [3.]*no_rips ) )

    no_rips -= 6
    vv.remove_ripls(6)
    ## FIXME fails because remove_ripls will preserve one ripl per engine
    #assert( vv.report(1) == ( [3.] * no_rips ) )
    

def testDirectives():
    ## TEST DIRECTIVES
    v = MRipl(2); cat = lambda xs,ys: xs + ys 
    test_v = make_church_prime_ripl(); test_v.set_seed(0)
    ls_x = v.assume('x','(uniform_continuous 0 1000)')
    test_x = test_v.assume('x','(uniform_continuous 0 1000)')
    local_x = v.local_ripl.report(1)
    assert( np.round(test_x) in np.round(ls_x) )
    assert( np.round(local_x) in np.round(ls_x) )

    # # this fails with val = '-10.'
    v.observe('(normal x 50)','-10')
    test_v.observe('(normal x 50)','-10')
    ls_obs = v.report(2);
    test_obs = test_v.report(2)
    local_obs = v.local_ripl.report(2)
    assert( ( [ np.round(test_obs)]*v.no_ripls ) == list(np.round(ls_obs))  )
    assert( ( [np.round(local_obs)]*v.no_ripls ) == list(np.round(ls_obs))  )

    v.infer(120); test_v.infer(120)
    ls_x2 = v.report(1); test_x2 = test_v.report(1);
    local_x2 = v.local_ripl.report(1)
    assert( np.round(test_x2) in np.round(ls_x2) )
    assert( np.round(local_x2) in np.round(ls_x2) )
    assert( np.mean(test_x2) < np.mean(test_x) )
    assert( not( v.no_ripls>10 and np.mean(test_x2) > 50) ) # may be too tight


    ls_x3=v.predict('(normal x .1)')
    test_x3 = test_v.predict('(normal x .1)')
    local_x3 = v.local_ripl.predict('(normal x .1)')
    assert( np.round(test_x3) in np.round(ls_x3) )
    assert( np.round(local_x3) in np.round(ls_x3) )
    assert( np.mean(test_x3) < np.mean(test_x) )
    assert( not( v.no_ripls>10 and np.mean(test_x3) > 50) ) # may be too tight


def testSnapshot():
    v=MRipl(4)
    v.assume('x','(poisson 10)',label='x')
    v.assume('y','3.',label='y')
    seeds_poisson = [15.,4.,9.,11.] #precomputed
    s=v.snapshot('x'); xs = s['values']['x']
    vals = [ xs[ripl['seed']] for ripl in s['ripls_info'] ]
    assert seeds_poisson == vals
    
    
    assert v.snapshot('y')['values']['y'] == ([3.]*4)
    assert v.snapshot('y')['total_transitions'] == 0
    assert len(v.snapshot('y')['ripls_info']) == 4



tests = [testSnapshot, testDirectives,testCopyRipl,testAddRemoveSize,testParallelCopyFunction,testCopyFunction]

def testAll(): return [t() for t in tests]

if __name__ == '__main__':
    testAll()


